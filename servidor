import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Manuel
 */
public class Principal extends javax.swing.JFrame {

    public static int consumidor=0;
    public static int[] direccionC;
    public static int[] puertoC;
    
    public static int productor=0;
    public static int[] direccionP;
    public static int[] puertoP;
    Producto product= new Producto();

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setExtendedState(MAXIMIZED_BOTH);
        
       // cambioImagen(product.getProducto());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Imagen para mostrar el recurso");

        jButton1.setText("Iniciar el servidor");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(327, 327, 327)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(337, 337, 337)
                        .addComponent(jLabel1)))
                .addContainerGap(342, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(196, 196, 196)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 137, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(130, 130, 130))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {                                      
        // TODO add your handling code here:
        Runnable miRunnable = new Runnable()
        {
           public void run()
           {
     int PUERTO=5000;
     //product= new Producto();
     //cambioImagen(product.getProducto());
     
     
     ServerSocket sc;
     Socket so;
     DataOutputStream salida;
     String mensajeRecibido;
	

		//initServer();

	//public  void initServer(){// throws Exception{
          BufferedReader entrada;
         // int PUERTO=5000;
        //Boolean ciclo=true;
          String IP,rangoA,rangoB,respuesta="";
          
        while(true){//probanod el while
try{
            
            sc = new ServerSocket(PUERTO );/* crea socket servidor que escuchara en puerto 5000*/
            so=new Socket();
            System.out.println("Esperando una conexión:");
            so = sc.accept();
//Inicia el socket, ahora esta esperando una conexión por parte del cliente
            System.out.println("Un cliente se ha conectado.");
//Canales de entrada y salida de datos

            entrada = new BufferedReader(new InputStreamReader(so.getInputStream()));
            salida = new DataOutputStream(so.getOutputStream());
            System.out.println("Confirmando conexion al cliente....");
          //  salida.writeUTF("Conexion exitosa...\r\n");
            String accion= entrada.readLine();
            if(accion.equals("meter")){
                product.meteProducto();
                //funcion a modificar la imagen
                cambioImagen(product.getProducto());
                System.out.println("Se metio");
            }
            else{
                product.sacaProducto();
                cambioImagen(product.getProducto());
                //funcion a modificar la imagen
                System.out.println("Se saco"); 
            }
            salida.writeUTF("Listo...\r\n");
                
            //**********************************************************************************
         //   rangoA=entrada.readLine();
          //  rangoB=entrada.readLine();
          //  System.out.println("IP:"+IP+" rangoA: "+rangoA+ " rangoB:" +rangoB);
          //  int rangoa= Integer.parseInt(rangoA);
          //  int rangob = Integer.parseInt(rangoB);
           // salida.writeUTF("Se recibio tu mensaje.n Terminando conexion...");
           // PrintWriter out = new PrintWriter(new OutputStreamWriter(so.getOutputStream()),true);
            
           // while(rangoa <= rangob){
             //   try{
                //poner el ciclo dependiendo de los rangos
                /*
                Socket socket= new Socket (IP,rangoa);
                BufferedReader in = new BufferedReader (new InputStreamReader(socket.getInputStream()));
                PrintWriter out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream()),true);
        	//if (0==0)
        	//	return;
        	String c = "Saludos desde el cliente";
                out.println(c);
                respuesta=respuesta+"Esta disponible el puerto: "+ rangoa+"\n";
        	//String line = "Esta diponible el puerto:"+rangoA;
        	
               // System.out.println(line);
        	socket.close();
                rangoa=rangoa+1;*/
              /*  }catch (IOException e)
              {
               		//System.out.println("No esta disponible el puerto:"+rangoA);
                        //respuesta=respuesta+"No esta disponible el puerto: "+ rangoa+"\n";
                       // rangoa=rangoa+1;
              }*/
                //System.out.println(respuesta);
              
           // System.out.println(respuesta);
            //salida.writeUTF(respuesta);
            
            
            
            //salida.writeUTF("se realizo correcto");
            sc.close();//Aqui se cierra la conexión con el cliente

            
            
}catch(Exception e ){}
        }
	//}
           }
          };
         
        Thread hilo = new Thread (miRunnable);
        hilo.start();
           
	

    }                                     

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
                
                //inicializar los arreglos
                //direccionC = new int[1000];
                //puertoC = new int[1000];
                //direccionP = new int[1000];
                //puertoP = new int[1000];
            }
        });
        
       
    }
     /*public int getConsumidor(){
            return consumidor;
        }
     public void setConsumidor(int nuevo){
            consumidor=nuevo;
        }
*/
     public BufferedImage llamarImagen(String ruta){
      //  File peque = new File("C:\\Users\\Manuel\\Documents\\peque.jpg");
        File peque = new File(ruta);
        BufferedImage bmp=null;
        try{
         bmp =  ImageIO.read(peque);
        }catch(Exception e){}
       // imageActual=bmp;
        return bmp;
    }
     
     public void cambioImagen(int num){
         Runnable miRunnable = new Runnable()
        {
           public void run()
           {
              try
              {
                  //while(true){
                  String ruta="C:\\Users\\Manuel\\Documents\\NetBeansProjects\\hello-worldd\\hilodistribuido\\Imagen";
                    ruta=ruta+"\\"+Integer.toString(num)+".png";
                    
                  File peque = new File(ruta);
                    BufferedImage bmp=null;
        //try{
                    bmp =  ImageIO.read(peque);
       // }catch(Exception e){}
       // imageActual=bmp;
       jLabel1.setIcon(new ImageIcon(bmp));  
                 // Thread.sleep(5000);
                  //}
                   // jLabel1.setIcon(new ImageIcon(llamarImagen(ruta)));  
              }
              catch (Exception e)
              {
                 e.printStackTrace();
              }
           }
        };
        Thread hilo = new Thread (miRunnable);
        hilo.start();
         
     }
     
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration                   
}
